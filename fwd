#!/usr/bin/env python3

"""Usage: fwd [-h] [-n num] [-P pck] [-t tag] [host:port]

Options

  host    Host of the remote server to connect to <localhost>
  port   .Port to connect to the remote server <24224>
  -t tag  Set a tag name attached to payloads <debug.log>
  -n num  Send N data records <10000>
  -m num  Send (at-most) M records in a single request <10>

Examples

  $ echo '{"foo":"bar"}' | fwd -n 10000 -t app.log localhost:24224
"""

import sys
import socket
import time
import json
import getopt
import msgpack
import datetime as dt

def log(*args):
    print(dt.datetime.now(), *args, file=sys.stderr)

def unixtime():
    return int(time.time())

class ForwardClient:

    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.sock = None

    def connect(self):
        addr = (self.host, self.port)
        while 1:
            try:
                return socket.create_connection(addr)
            except OSError:
                log('cannot connect to %s:%s. retry in 1s' % addr)
                time.sleep(1)

    def send(self, data):
        total = len(data)
        sent = 0

        while sent < total:
            if self.sock is None:
                self.sock = self.connect()
            try:
                nbytes = self.sock.send(data[sent:])
                if nbytes == 0:
                    raise OSError
                sent += nbytes
            except OSError as e:
                log('error occured during transmission <%s>. will resend' % e)
                self.close()
                sent = 0

    def close(self):
        if self.sock:
            self.sock.close()
            self.sock = None

def parse_input(s):
    s = s.strip()
    try:
        return json.loads(s)
    except json.decoder.JSONDecodeError:
        return {'message': s}

def usage():
    print(__doc__, file=sys.stderr)

def main():
    host = 'localhost'
    port = 24224
    tag = 'debug.log'
    num = 10000
    multi = 10

    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hn:m:t:')
    except getopt.GetoptError as e:
        print('error: %s\n' % e, file=sys.stderr)
        usage()
        return 1

    for k, v in opts:
        if k == '-h':
            usage()
            return
        elif k == '-n':
            num = int(v)
        elif k == '-m':
            multi = int(v)
        elif k == '-t':
            tag = v

    if args:
        if ':' in args[0]:
            tmp = args[0].rsplit(':', maxsplit=1)
            host = tmp[0]
            port = int(tmp[1])
        else:
            host = args[0]

    if sys.stdin.isatty():
        msg = {'message': 'dummy'}
    else:
        msg = parse_input(sys.stdin.read())

    fc = ForwardClient(host, port)

    log("run (n=%s, m=%s)" % (num, multi))
    t0 = time.time()

    sent = 0
    while sent < num:
        dup = min(multi, num - sent)
        data = [tag, [[unixtime(), msg]] * dup]
        fc.send(msgpack.dumps(data))
        sent += dup
    fc.close()

    dt = time.time() - t0
    eps = num / dt
    log("done (%.2f sec / %i eps)" % (dt, eps))

if __name__ == '__main__':
    sys.exit(main())
